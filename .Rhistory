StdDev_shooting_nn5 = sd(shooting_nn5),
Mean_price = mean(price),
StdDev_price = sd(price)
)
### Input the average value of the variables with missing observations (N/A)
numeric_columns <- sapply(Philly_Housing_joined, is.numeric)
for (col in names(Philly_Housing_joined)[numeric_columns]) {
col_mean <- mean(Philly_Housing_joined[[col]], na.rm = TRUE)
Philly_Housing_joined[[col]][is.na(Philly_Housing_joined[[col]])] <- col_mean
}
# price_variables <- Philly_Housing_joined[, c("houseAge")]
# stargazer(price_variables, type = "text")
summary_data <- Philly_Housing_joined %>%
select(houseAge, shooting_nn5, dist_to_school) %>%
summarize(
Mean_houseAge = mean(houseAge),
StdDev_houseAge = sd(houseAge),
Mean_shooting_nn5 = mean(shooting_nn5),
StdDev_shooting_nn5 = sd(shooting_nn5),
Mean_price = mean(dist_to_school),
StdDev_price = sd(dist_to_school)
)
kable(summary_data, format = "markdown")
### Input the average value of the variables with missing observations (N/A)
numeric_columns <- sapply(Philly_Housing_joined, is.numeric)
for (col in names(Philly_Housing_joined)[numeric_columns]) {
col_mean <- mean(Philly_Housing_joined[[col]], na.rm = TRUE)
Philly_Housing_joined[[col]][is.na(Philly_Housing_joined[[col]])] <- col_mean
}
# price_variables <- Philly_Housing_joined[, c("houseAge")]
# stargazer(price_variables, type = "text")
summary_data <- Philly_Housing_joined %>%
select(houseAge, shooting_nn5, dist_to_school) %>%
summarize(
Mean_houseAge = mean(houseAge),
StdDev_houseAge = sd(houseAge),
Mean_shooting_nn5 = mean(shooting_nn5),
StdDev_shooting_nn5 = sd(shooting_nn5),
Mean_price = mean(dist_to_school),
StdDev_price = sd(dist_to_school)
)
kable(summary_data, format = "html")
### Input the average value of the variables with missing observations (N/A)
numeric_columns <- sapply(Philly_Housing_joined, is.numeric)
for (col in names(Philly_Housing_joined)[numeric_columns]) {
col_mean <- mean(Philly_Housing_joined[[col]], na.rm = TRUE)
Philly_Housing_joined[[col]][is.na(Philly_Housing_joined[[col]])] <- col_mean
}
# price_variables <- Philly_Housing_joined[, c("houseAge")]
# stargazer(price_variables, type = "text")
summary_data <- Philly_Housing_joined %>%
select(houseAge, shooting_nn5, dist_to_school) %>%
summarize(
Mean = mean(.),
StdDev = sd(.),
Min = min(.),
Max = max(.)
)
### Input the average value of the variables with missing observations (N/A)
numeric_columns <- sapply(Philly_Housing_joined, is.numeric)
for (col in names(Philly_Housing_joined)[numeric_columns]) {
col_mean <- mean(Philly_Housing_joined[[col]], na.rm = TRUE)
Philly_Housing_joined[[col]][is.na(Philly_Housing_joined[[col]])] <- col_mean
}
# price_variables <- Philly_Housing_joined[, c("houseAge")]
# stargazer(price_variables, type = "text")
selected_columns <- Philly_Housing_joined %>%
select(houseAge, shooting_nn5, dist_to_school)
# Compute summary statistics for the selected columns
summary_data <- selected_columns %>%
summarise(
Mean = mean(.),
StdDev = sd(.),
Min = min(.),
Max = max(.)
)
### Input the average value of the variables with missing observations (N/A)
numeric_columns <- sapply(Philly_Housing_joined, is.numeric)
for (col in names(Philly_Housing_joined)[numeric_columns]) {
col_mean <- mean(Philly_Housing_joined[[col]], na.rm = TRUE)
Philly_Housing_joined[[col]][is.na(Philly_Housing_joined[[col]])] <- col_mean
}
# price_variables <- Philly_Housing_joined[, c("houseAge")]
# stargazer(price_variables, type = "text")
selected_columns <- Philly_Housing_joined %>%
select(houseAge, shooting_nn5, dist_to_school)
# Compute summary statistics for the selected columns
summary_data <- selected_columns %>%
summarise(
Variable = "Mean",
Mean = mean(houseAge),
StdDev = sd(houseAge),
Min = min(houseAge),
Max = max(houseAge)
) %>%
bind_rows(
selected_columns %>%
summarise(
Variable = "Mean",
Mean = mean(shooting_nn5),
StdDev = sd(shooting_nn5),
Min = min(shooting_nn5),
Max = max(shooting_nn5)
)
)
kable(summary_data)
### Input the average value of the variables with missing observations (N/A)
numeric_columns <- sapply(Philly_Housing_joined, is.numeric)
for (col in names(Philly_Housing_joined)[numeric_columns]) {
col_mean <- mean(Philly_Housing_joined[[col]], na.rm = TRUE)
Philly_Housing_joined[[col]][is.na(Philly_Housing_joined[[col]])] <- col_mean
}
# price_variables <- Philly_Housing_joined[, c("houseAge")]
# stargazer(price_variables, type = "text")
selected_columns <- Philly_Housing_joined %>%
select(houseAge, shooting_nn5, dist_to_school)
# Compute summary statistics for the selected columns
summary_data <- selected_columns %>%
summarise(
Variable = "Mean",
Mean = mean(houseAge),
StdDev = sd(houseAge),
Min = min(houseAge),
Max = max(houseAge)
) %>%
bind_rows(
selected_columns %>%
summarise(
Variable = "Mean",
Mean = mean(shooting_nn5),
StdDev = sd(shooting_nn5),
Min = min(shooting_nn5),
Max = max(shooting_nn5)
)
)
kable(summary_data, format = "text")
### Input the average value of the variables with missing observations (N/A)
numeric_columns <- sapply(Philly_Housing_joined, is.numeric)
for (col in names(Philly_Housing_joined)[numeric_columns]) {
col_mean <- mean(Philly_Housing_joined[[col]], na.rm = TRUE)
Philly_Housing_joined[[col]][is.na(Philly_Housing_joined[[col]])] <- col_mean
}
# price_variables <- Philly_Housing_joined[, c("houseAge")]
# stargazer(price_variables, type = "text")
selected_columns <- Philly_Housing_joined %>%
select(houseAge, shooting_nn5, dist_to_school)
# Compute summary statistics for the selected columns
summary_data <- selected_columns %>%
summarise(
Variable = "Mean",
Mean = mean(houseAge),
StdDev = sd(houseAge),
Min = min(houseAge),
Max = max(houseAge)
) %>%
bind_rows(
selected_columns %>%
summarise(
Variable = "Mean",
Mean = mean(shooting_nn5),
StdDev = sd(shooting_nn5),
Min = min(shooting_nn5),
Max = max(shooting_nn5)
)
)
kable(summary_data, format = "html")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Load Libraries
library(geos)
library(rsgeo)
library(tidyverse)
library(tidycensus)
library(sf)
library(kableExtra)
library(knitr)
library(dplyr)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot)
library(stargazer)
options(scipen=999)
options(tigris_class = "sf")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
census_api_key("6a81f5ae68fcb8e26d2f0a80f4232c5e503b553d", overwrite = TRUE)
Philly_block_groups <-
st_read("https://opendata.arcgis.com/datasets/2f982bada233478ea0100528227febce_0.geojson") %>%
st_transform('ESRI:102728')
neighborhood <- st_read("/Users/rachelren/Desktop/Upenn/MUSA_5080/Midterm/MUSA508_Midterm_Li_Ren/Data/Neighborhoods_Philadelphia.geojson") %>%
st_transform('ESRI:102728')
Philly_price_all <-
st_read("/Users/rachelren/Desktop/Upenn/MUSA_5080/Midterm/MUSA508_Midterm_Li_Ren/Data/studentData.geojson") %>%
st_transform('ESRI: 102728')
Philly_price_clean <- Philly_price_all[, c("objectid", "census_tract", "total_area", "quality_grade", "sale_price", "year_built", "geometry", "toPredict")] ## Select columns we use
## Calculate the age of the house
Philly_price_clean <-
Philly_price_clean %>%
mutate(houseAge = ifelse((year_built > 0 & year_built < 2023), 2023-year_built, 0))
## Data of the housing nearby environments
Shooting_victims <-
st_read("/Users/rachelren/Desktop/Upenn/MUSA_5080/Midterm/MUSA508_Midterm_Li_Ren/Data/shootings.geojson") %>%
st_transform('ESRI: 102728')
PPR_Sites <-
st_read("/Users/rachelren/Desktop/Upenn/MUSA_5080/Midterm/MUSA508_Midterm_Li_Ren/Data/PPR_Program_Sites.geojson") %>%
st_transform('ESRI: 102728')
Commercial_Corridors <-
st_read("/Users/rachelren/Desktop/Upenn/MUSA_5080/Midterm/MUSA508_Midterm_Li_Ren/Data/Commercial_Corridors.geojson") %>%
st_transform('ESRI: 102728')
schools <-
read.csv("/Users/rachelren/Desktop/Upenn/MUSA_5080/Midterm/MUSA508_Midterm_Li_Ren/Data/Schools.csv")
schools.sf <-
schools %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102728')
##Get and clean the variables in the 2021 Census data
## all of the variables are in block group
blockgroup21 <-
get_acs(geography = "block group",
variables = c("B19013_001E","B99051_005E",
"B01003_001E","B07201_003E",
"B07201_001E"),
year=2021, state=42,
county=101, geometry=TRUE) %>%
st_transform('ESRI:102728')
variables2021 <- load_variables(2021,'acs5')
variables2021_blockGroup <- load_variables(2021,'acs5') %>%
dplyr::filter(geography == 'block group')
variables2021_tract <- load_variables(2021,'acs5') %>%
dplyr::filter(geography == 'tract')
blockgroup21 <-
blockgroup21 %>%
dplyr::select( -NAME, -moe) %>%
spread(key = variable, value = estimate) %>%
rename(TotalPop = B01003_001,
ForeignBorn = B99051_005,
MedHHInc = B19013_001,
MobilityDifferentHouse = B07201_003,
MobilityTotal = B07201_001
)
## Calculate the percentage of foreign born and the mobility rate
blockgroup21 <-
blockgroup21 %>%
mutate(pctForeign = ifelse(TotalPop > 0, ForeignBorn / TotalPop, 0),
pctMobility = ifelse(MobilityTotal > 0, (MobilityDifferentHouse / MobilityTotal), 0),
year = "2021") %>%
dplyr::select(-ForeignBorn,-MobilityDifferentHouse,-MobilityTotal,-TotalPop)
Shooting_victims %>%
group_by(wound) %>%
summarize(count = n()) %>%
arrange(-count)
PhillyShootingHead.sf <-
Shooting_victims %>%
filter(wound == "Head",
point_y > -1) %>%
dplyr::select(point_y, point_x) %>%
na.omit() %>%
st_as_sf(coords = c("Long", "Lat")) %>%
st_transform('ESRI:102728') %>%
distinct()
Philly_price_clean$shooting.Buffer <- Philly_price_clean %>%
st_buffer(1000) %>%
aggregate(mutate(PhillyShootingHead.sf, counter = 1),., sum) %>%
pull(counter)
nearest_school <- sf::st_nearest_feature(Philly_price_clean, schools.sf)
x <- rsgeo::as_rsgeo(Philly_price_clean)
y <- rsgeo::as_rsgeo(schools.sf)
Philly_price_clean$dist_to_school <- rsgeo::distance_euclidean_pairwise(x, y[nearest_school])
nearest_Commercial <- sf::st_nearest_feature(Philly_price_clean, Commercial_Corridors)
x <- rsgeo::as_rsgeo(Philly_price_clean)
y <- rsgeo::as_rsgeo(Commercial_Corridors)
Philly_price_clean$dist_to_commerce <- rsgeo::distance_euclidean_pairwise(x, y[nearest_Commercial])
nearest_PPR <- sf::st_nearest_feature(Philly_price_clean, PPR_Sites)
x <- rsgeo::as_rsgeo(Philly_price_clean)
y <- rsgeo::as_rsgeo(PPR_Sites)
Philly_price_clean$dist_to_PPR <- rsgeo::distance_euclidean_pairwise(x, y[nearest_PPR])
Philly_Housing_joined <-
st_join(Philly_price_clean, blockgroup21, join = st_within)
Philly_Housing_joined <-
st_join(Philly_Housing_joined, neighborhood, join = st_within)
Philly_Housing_joined <-
Philly_Housing_joined %>%
mutate(
quality_grade.cat = case_when(
quality_grade == 'A' ||
quality_grade == 'A-' ||
quality_grade == 'A+' || ~ "Good Condition",
quality_grade == 'C' ||
quality_grade == 'C-' ||
quality_grade == 'C+' ||
quality_grade == 'B' ||
quality_grade == 'B-' ||
quality_grade == 'B+'  ~ "Fair Condition",
quality_grade == 'D' ||
quality_grade == 'D-' ||
quality_grade == 'D+' ||
quality_grade == 'E' ||
quality_grade == 'E-' ||
quality_grade == 'E+'~ "Bad Condition",
.default = "other"
)
)
View(Philly_Housing_joined)
Philly_Housing_joined <-
st_join(Philly_price_clean, blockgroup21, join = st_within)
Philly_Housing_joined <-
st_join(Philly_Housing_joined, neighborhood, join = st_within)
Philly_Housing_joined <-
Philly_Housing_joined %>%
mutate(
quality_grade.cat = case_when(
quality_grade == 'A' |
quality_grade == 'A-' |
quality_grade == 'A+' | ~ "Good Condition",
quality_grade == 'C' |
quality_grade == 'C-' |
quality_grade == 'C+' |
quality_grade == 'B' |
quality_grade == 'B-' |
quality_grade == 'B+'  ~ "Fair Condition",
quality_grade == 'D' |
quality_grade == 'D-' |
quality_grade == 'D+' |
quality_grade == 'E' |
quality_grade == 'E-' |
quality_grade == 'E+'~ "Bad Condition",
.default = "other"
)
)
Philly_Housing_joined <-
st_join(Philly_price_clean, blockgroup21, join = st_within)
Philly_Housing_joined <-
st_join(Philly_Housing_joined, neighborhood, join = st_within)
Philly_Housing_joined <-
Philly_Housing_joined %>%
mutate(
quality_grade.cat = case_when(
quality_grade %in% c('A', 'A-', 'A+') ~ "Good Condition",
quality_grade %in% c('C', 'C-', 'C+', 'B', 'B-', 'B+') ~ "Fair Condition",
quality_grade %in% c('D', 'D-', 'D+', 'E', 'E-', 'E+') ~ "Bad Condition",
TRUE ~ "other"
)
)
Philly_Housing_joined <-
st_join(Philly_price_clean, blockgroup21, join = st_within)
Philly_Housing_joined <-
st_join(Philly_Housing_joined, neighborhood, join = st_within)
Philly_Housing_joined <-
Philly_Housing_joined %>%
mutate(
quality_grade.cat = case_when(
quality_grade %in% c('A', 'A-', 'A+') ~ 4,
quality_grade %in% c('C', 'C-', 'C+', 'B', 'B-', 'B+') ~ 3,
quality_grade %in% c('D', 'D-', 'D+', 'E', 'E-', 'E+') ~ 2,
TRUE ~ 1
)
)
numeric_columns <- sapply(Philly_Housing_joined, is.numeric)
for (col in names(Philly_Housing_joined)[numeric_columns]) {
col_mean <- mean(Philly_Housing_joined[[col]], na.rm = TRUE)
Philly_Housing_joined[[col]][is.na(Philly_Housing_joined[[col]])] <- col_mean
}
Philly_price_Model <- Philly_Housing_joined %>%
filter(toPredict == "MODELLING") %>%
summary_fields <- Philly_price_Model[c("total_area","houseAge", "quality_grade.cat", "MedHHInc", "pctForeign", "pctMobility", "shooting.Buffer", "dist_to_school", "dist_to_commerce", "dist_to_PPR")]
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Load Libraries
library(geos)
library(rsgeo)
library(tidyverse)
library(tidycensus)
library(sf)
library(kableExtra)
library(knitr)
library(dplyr)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot)
library(stargazer)
options(scipen=999)
options(tigris_class = "sf")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
census_api_key("6a81f5ae68fcb8e26d2f0a80f4232c5e503b553d", overwrite = TRUE)
Philly_block_groups <-
st_read("https://opendata.arcgis.com/datasets/2f982bada233478ea0100528227febce_0.geojson") %>%
st_transform('ESRI:102728')
neighborhood <- st_read("/Users/rachelren/Desktop/Upenn/MUSA_5080/Midterm/MUSA508_Midterm_Li_Ren/Data/Neighborhoods_Philadelphia.geojson") %>%
st_transform('ESRI:102728')
Philly_price_all <-
st_read("/Users/rachelren/Desktop/Upenn/MUSA_5080/Midterm/MUSA508_Midterm_Li_Ren/Data/studentData.geojson") %>%
st_transform('ESRI: 102728')
Philly_price_clean <- Philly_price_all[, c("objectid", "census_tract", "total_area", "quality_grade", "sale_price", "year_built", "geometry", "toPredict")] ## Select columns we use
## Calculate the age of the house
Philly_price_clean <-
Philly_price_clean %>%
mutate(houseAge = ifelse((year_built > 0 & year_built < 2023), 2023-year_built, 0))
## Data of the housing nearby environments
Shooting_victims <-
st_read("/Users/rachelren/Desktop/Upenn/MUSA_5080/Midterm/MUSA508_Midterm_Li_Ren/Data/shootings.geojson") %>%
st_transform('ESRI: 102728')
PPR_Sites <-
st_read("/Users/rachelren/Desktop/Upenn/MUSA_5080/Midterm/MUSA508_Midterm_Li_Ren/Data/PPR_Program_Sites.geojson") %>%
st_transform('ESRI: 102728')
Commercial_Corridors <-
st_read("/Users/rachelren/Desktop/Upenn/MUSA_5080/Midterm/MUSA508_Midterm_Li_Ren/Data/Commercial_Corridors.geojson") %>%
st_transform('ESRI: 102728')
schools <-
read.csv("/Users/rachelren/Desktop/Upenn/MUSA_5080/Midterm/MUSA508_Midterm_Li_Ren/Data/Schools.csv")
schools.sf <-
schools %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102728')
##Get and clean the variables in the 2021 Census data
## all of the variables are in block group
blockgroup21 <-
get_acs(geography = "block group",
variables = c("B19013_001E","B99051_005E",
"B01003_001E","B07201_003E",
"B07201_001E"),
year=2021, state=42,
county=101, geometry=TRUE) %>%
st_transform('ESRI:102728')
variables2021 <- load_variables(2021,'acs5')
variables2021_blockGroup <- load_variables(2021,'acs5') %>%
dplyr::filter(geography == 'block group')
variables2021_tract <- load_variables(2021,'acs5') %>%
dplyr::filter(geography == 'tract')
blockgroup21 <-
blockgroup21 %>%
dplyr::select( -NAME, -moe) %>%
spread(key = variable, value = estimate) %>%
rename(TotalPop = B01003_001,
ForeignBorn = B99051_005,
MedHHInc = B19013_001,
MobilityDifferentHouse = B07201_003,
MobilityTotal = B07201_001
)
## Calculate the percentage of foreign born and the mobility rate
blockgroup21 <-
blockgroup21 %>%
mutate(pctForeign = ifelse(TotalPop > 0, ForeignBorn / TotalPop, 0),
pctMobility = ifelse(MobilityTotal > 0, (MobilityDifferentHouse / MobilityTotal), 0),
year = "2021") %>%
dplyr::select(-ForeignBorn,-MobilityDifferentHouse,-MobilityTotal,-TotalPop)
Shooting_victims %>%
group_by(wound) %>%
summarize(count = n()) %>%
arrange(-count)
PhillyShootingHead.sf <-
Shooting_victims %>%
filter(wound == "Head",
point_y > -1) %>%
dplyr::select(point_y, point_x) %>%
na.omit() %>%
st_as_sf(coords = c("Long", "Lat")) %>%
st_transform('ESRI:102728') %>%
distinct()
Philly_price_clean$shooting.Buffer <- Philly_price_clean %>%
st_buffer(1000) %>%
aggregate(mutate(PhillyShootingHead.sf, counter = 1),., sum) %>%
pull(counter)
nearest_school <- sf::st_nearest_feature(Philly_price_clean, schools.sf)
x <- rsgeo::as_rsgeo(Philly_price_clean)
y <- rsgeo::as_rsgeo(schools.sf)
Philly_price_clean$dist_to_school <- rsgeo::distance_euclidean_pairwise(x, y[nearest_school])
nearest_Commercial <- sf::st_nearest_feature(Philly_price_clean, Commercial_Corridors)
x <- rsgeo::as_rsgeo(Philly_price_clean)
y <- rsgeo::as_rsgeo(Commercial_Corridors)
Philly_price_clean$dist_to_commerce <- rsgeo::distance_euclidean_pairwise(x, y[nearest_Commercial])
nearest_PPR <- sf::st_nearest_feature(Philly_price_clean, PPR_Sites)
x <- rsgeo::as_rsgeo(Philly_price_clean)
y <- rsgeo::as_rsgeo(PPR_Sites)
Philly_price_clean$dist_to_PPR <- rsgeo::distance_euclidean_pairwise(x, y[nearest_PPR])
Philly_Housing_joined <-
st_join(Philly_price_clean, blockgroup21, join = st_within)
Philly_Housing_joined <-
st_join(Philly_Housing_joined, neighborhood, join = st_within)
Philly_Housing_joined <-
Philly_Housing_joined %>%
mutate(
quality_grade.cat = case_when(
quality_grade %in% c('A', 'A-', 'A+') ~ 4,
quality_grade %in% c('C', 'C-', 'C+', 'B', 'B-', 'B+') ~ 3,
quality_grade %in% c('D', 'D-', 'D+', 'E', 'E-', 'E+') ~ 2,
TRUE ~ 1
)
)
numeric_columns <- sapply(Philly_Housing_joined, is.numeric)
for (col in names(Philly_Housing_joined)[numeric_columns]) {
col_mean <- mean(Philly_Housing_joined[[col]], na.rm = TRUE)
Philly_Housing_joined[[col]][is.na(Philly_Housing_joined[[col]])] <- col_mean
}
Philly_price_Model <- Philly_Housing_joined %>%
filter(toPredict == "MODELLING") %>%
summary_fields <- Philly_price_Model[c("total_area","houseAge", "quality_grade.cat", "MedHHInc", "pctForeign", "pctMobility", "shooting.Buffer", "dist_to_school", "dist_to_commerce", "dist_to_PPR")]
numeric_columns <- sapply(Philly_Housing_joined, is.numeric)
for (col in names(Philly_Housing_joined)[numeric_columns]) {
col_mean <- mean(Philly_Housing_joined[[col]], na.rm = TRUE)
Philly_Housing_joined[[col]][is.na(Philly_Housing_joined[[col]])] <- col_mean
}
Philly_price_Model <- Philly_Housing_joined %>%
filter(toPredict == "MODELLING") %>%
summary_fields <- Philly_price_Model[c("total_area","houseAge", "quality_grade.cat", "MedHHInc", "pctForeign", "pctMobility", "shooting.Buffer", "dist_to_school", "dist_to_commerce", "dist_to_PPR")]
Philly_price_Model <- Philly_Housing_joined %>%
filter(toPredict == "MODELLING") %>%
summary_fields <- Philly_price_Model[c("total_area","houseAge", "quality_grade.cat", "MedHHInc", "pctForeign", "pctMobility", "shooting.Buffer", "dist_to_school", "dist_to_commerce", "dist_to_PPR")]
