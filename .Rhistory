y <- rsgeo::as_rsgeo(schools.sf)
Philly_price_clean$dist_to_school <- rsgeo::distance_euclidean_pairwise(x, y[nearest_school])
nearest_Commercial <- sf::st_nearest_feature(Philly_price_clean, Commercial_Corridors)
x <- rsgeo::as_rsgeo(Philly_price_clean)
y <- rsgeo::as_rsgeo(Commercial_Corridors)
Philly_price_clean$dist_to_commerce <- rsgeo::distance_euclidean_pairwise(x, y[nearest_Commercial])
nearest_PPR <- sf::st_nearest_feature(Philly_price_clean, PPR_Sites)
x <- rsgeo::as_rsgeo(Philly_price_clean)
y <- rsgeo::as_rsgeo(PPR_Sites)
Philly_price_clean$dist_to_PPR <- rsgeo::distance_euclidean_pairwise(x, y[nearest_PPR])
Philly_Housing_joined <-
st_join(Philly_price_clean, blockgroup21, join = st_within)
Philly_Housing_joined <-
st_join(Philly_Housing_joined, neighborhood, join = st_within)
# Philly_Housing_joined <-
#   Philly_Housing_joined %>%
#   mutate(
#     quality_grade.cat = case_when(
#       quality_grade %in% c('A', 'A-', 'A+') ~ 4,
#       quality_grade %in% c('C', 'C-', 'C+', 'B', 'B-', 'B+') ~ 3,
#       quality_grade %in% c('D', 'D-', 'D+', 'E', 'E-', 'E+') ~ 2,
#       TRUE ~ 1
#     )
#   )
numeric_columns <- sapply(Philly_Housing_joined, is.numeric)
for (col in names(Philly_Housing_joined)[numeric_columns]) {
col_mean <- mean(Philly_Housing_joined[[col]], na.rm = TRUE)
Philly_Housing_joined[[col]][is.na(Philly_Housing_joined[[col]])] <- col_mean
}
Philly_price_Model <- Philly_Housing_joined %>%
filter(toPredict == "MODELLING")
summary_fields <- Philly_price_Model[c("total_area","houseAge", "interior_condition", "MedHHInc", "pctForeign", "pctMobility", "shooting.Buffer", "dist_to_school", "dist_to_commerce", "dist_to_PPR")]
#table_column_labels = c("Exterior Condition", "Bedrooms", "House Age", "")
##descriptions <- c("total_area","houseAge", "MedHHInc", "pctForeign", "pctMobility", "shooting.Buffer", "dist_to_school", "dist_to_commerce", "dist_to_PPR")
stargazer(as.data.frame(summary_fields),
type = "text",
title = "Table 2.1: Summary Statistics",
##add.lines = list("Description" = descriptions),
digits = 1,
column.sep.width = "1cm",
flip = TRUE)
numericVars <- st_drop_geometry(Philly_price_Model)[, c("total_area", "houseAge", "interior_condition", "MedHHInc", "pctForeign", "pctMobility", "shooting.Buffer", "dist_to_school", "dist_to_commerce", "dist_to_PPR")]
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("#25CB10", "white", "#FA7800"),
type="lower",
insig = "blank") +
labs(title = "Correlation matrix across variables",
label = "Figure 2.1")
ggplot(Philly_price_Model, aes(x = MedHHInc, y = sale_price)) +
geom_point(size = .5) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(
title = "Price as a function of median household income",
x = "Median Household Income",
y = "Home Price",
label = "Figure 2.2"
) +
theme_minimal()
ggplot(Philly_price_Model, aes(x = houseAge, y = sale_price)) +
geom_point(size = .5) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(
title = "Price as a function of house age",
x = "Age",
y = "Home Price",
label = "Figure 2.3"
) +
theme_minimal()
ggplot(Philly_price_Model, aes(x = total_area, y = sale_price)) +
geom_point(size = .5) +
geom_smooth(method = "lm", se = FALSE, color = "orange") +
labs(
title = "Price as a function of total areas",
x = "total areas",
y = "Home Price",
label = "Figure 2.4"
) +
theme_minimal()
ggplot(Philly_price_Model, aes(x = dist_to_PPR, y = sale_price)) +
geom_point(size = .5) +
geom_smooth(method = "lm", se = FALSE, color = "orange") +
labs(
title = "Price as a function of distance to Parks and Recreation",
x = "Distance to Parks and Recreation",
y = "Home Price",
label = "Figure 2.5"
) +
theme_minimal()
mean_sale_price <- Philly_price_Model %>%
group_by(GEOID) %>%
summarize(MeanSalePrice = mean(sale_price))
blockgroup21 <- st_join(blockgroup21, mean_sale_price, by = "GEOID")
blockgroup21$MeanSalePrice[is.na(blockgroup21$MeanSalePrice)] <- 0
ggplot() +
geom_sf(data = blockgroup21, aes(fill = MeanSalePrice)) +
scale_fill_gradient(low = "lightblue",
high = "darkblue",
breaks = classInt::classIntervals(blockgroup21$MeanSalePrice, n = 5, style = "jenks")$brks,
name = "Sale Price (U.S. Dollars)") +
labs(title = "Choropleth Map of Housing Sale Price by Block Groups",
label = "Figure 2.6") +
theme_minimal()
mean_sale_price <- Philly_price_Model %>%
group_by(GEOID) %>%
summarize(MeanSalePrice = mean(sale_price))
blockgroup21 <- st_join(blockgroup21, mean_sale_price, by = "GEOID")
blockgroup21$MeanSalePrice[is.na(blockgroup21$MeanSalePrice)] <- 0
mean_sale_price <- Philly_price_Model %>%
group_by(GEOID) %>%
summarize(MeanSalePrice = mean(sale_price))
blockgroup21 <- st_join(blockgroup21, mean_sale_price, by = "GEOID")
blockgroup21$MeanSalePrice[is.na(blockgroup21$MeanSalePrice)] <- 0
ggplot() +
geom_sf(data = blockgroup21, aes(fill = MeanSalePrice)) +
scale_fill_gradient(colors = "Purples",
breaks = classInt::classIntervals(blockgroup21$MeanSalePrice, n = 5, style = "jenks")$brks,
name = "Sale Price (U.S. Dollars)") +
labs(title = "Choropleth Map of Housing Sale Price by Block Groups",
label = "Figure 2.6") +
theme_minimal()
mean_sale_price <- Philly_price_Model %>%
group_by(GEOID) %>%
summarize(MeanSalePrice = mean(sale_price))
blockgroup21 <- st_join(blockgroup21, mean_sale_price, by = "GEOID")
blockgroup21$MeanSalePrice[is.na(blockgroup21$MeanSalePrice)] <- 0
mean_sale_price <- Philly_price_Model %>%
group_by(GEOID) %>%
summarize(MeanSalePrice = mean(sale_price))
blockgroup21 <- st_join(blockgroup21, mean_sale_price, by = "GEOID")
blockgroup21$MeanSalePrice[is.na(blockgroup21$MeanSalePrice)] <- 0
ggplot() +
geom_sf(data = blockgroup21, aes(fill = MeanSalePrice)) +
scale_fill_gradient(palette = "Purples",
breaks = classInt::classIntervals(blockgroup21$MeanSalePrice, n = 5, style = "jenks")$brks,
name = "Sale Price (U.S. Dollars)") +
labs(title = "Choropleth Map of Housing Sale Price by Block Groups",
label = "Figure 2.6") +
theme_minimal()
mean_sale_price <- Philly_price_Model %>%
group_by(GEOID) %>%
summarize(MeanSalePrice = mean(sale_price))
blockgroup21 <- st_join(blockgroup21, mean_sale_price, by = "GEOID")
blockgroup21$MeanSalePrice[is.na(blockgroup21$MeanSalePrice)] <- 0
mean_sale_price <- Philly_price_Model %>%
group_by(GEOID) %>%
summarize(MeanSalePrice = mean(sale_price))
blockgroup21 <- st_join(blockgroup21, mean_sale_price, by = "GEOID")
blockgroup21$MeanSalePrice[is.na(blockgroup21$MeanSalePrice)] <- 0
ggplot() +
geom_sf(data = blockgroup21, aes(fill = MeanSalePrice)) +
scale_fill_gradient(low = "grey80", high = "purple",
breaks = classInt::classIntervals(blockgroup21$MeanSalePrice, n = 5, style = "jenks")$brks,
name = "Sale Price (U.S. Dollars)") +
labs(title = "Choropleth Map of Housing Sale Price by Block Groups",
label = "Figure 2.6") +
theme_minimal()
ggplot() +
geom_sf(data = blockgroup21, aes(fill = MeanSalePrice)) +
scale_fill_gradient(low = "grey80", high = "purple",
name = "Sale Price (U.S. Dollars)") +
labs(title = "Choropleth Map of Housing Sale Price by Block Groups",
label = "Figure 2.6") +
theme_minimal()
ggplot() +
geom_sf(data = blockgroup21, aes(fill = q5(MeanSalePrice)) +
scale_fill_gradient(low = "grey80", high = "purple",
name = "Sale Price (U.S. Dollars)") +
labs(title = "Choropleth Map of Housing Sale Price by Block Groups",
label = "Figure 2.6") +
theme_minimal()
ggplot() +
ggplot() +
geom_sf(data = blockgroup21, aes(fill = MeanSalePrice)) +
scale_fill_gradient(low = "grey80", high = "purple",
name = "Sale Price (U.S. Dollars)") +
labs(title = "Choropleth Map of Housing Sale Price by Block Groups",
label = "Figure 2.6") +
theme_minimal()
ggplot() +
geom_sf(data = blockgroup21, aes(fill = MeanSalePrice)) +
scale_fill_gradient(low = "lightblue", high = "darkblue",
name = "Sale Price (U.S. Dollars)") +
labs(title = "Choropleth Map of Housing Sale Price by Block Groups",
label = "Figure 2.6") +
theme_minimal()
stargazer(error_summary,
title = "Error Summary for Test Set",
type = "text",
align = TRUE
)
View(PhillyPrice.test.nhood)
View(PhillyPrice.test.nhood)
left_join(
st_drop_geometry(PhillyPrice.test) %>%
group_by(name) %>%
summarize(meanPrice = mean(sale_price, na.rm = T)),
mutate(PhillyPrice.test, predict.fe =
predict(lm(sale_price ~ name, data = PhillyPrice.test),
PhillyPrice.test)) %>%
st_drop_geometry %>%
group_by(name) %>%
summarize(meanPrediction = mean(predict.fe))) %>%
kable() %>% kable_styling()
reg.nhood <- lm(sale_price ~ ., data = as.data.frame(PhillyPrice.training) %>%
dplyr::select(sale_price, total_area, interior_condition, houseAge, shooting.Buffer, dist_to_school, dist_to_commerce, dist_to_PPR, MedHHInc, pctForeign, pctMobility))
PhillyPrice.test.nhood <-
PhillyPrice.test %>%
mutate(Regression = "Neighborhood Effects",
sale_price.Predict = predict(reg.nhood, PhillyPrice.test),
sale_price.Error = sale_price.Predict- sale_price,
sale_price.AbsError = abs(sale_price.Predict- sale_price),
sale_price.APE = (abs(sale_price.Predict- sale_price)) / sale_price)
mape_neighborhood <- PhillyPrice.test.nhood %>%
group_by(name) %>%
summarize(MAPE = mean(sale_price.APE, na.rm = TRUE))
View(mape_neighborhood)
ggplot(data = neighborhood_map_data) +
geom_sf(aes(fill = MAPE)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "MAPE") +
labs(title = "Mean Absolute Percentage Error by Neighborhood") +
theme_minimal()
ggplot(data = mape_neighborhood) +
geom_sf(aes(fill = MAPE)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "MAPE") +
labs(title = "Mean Absolute Percentage Error by Neighborhood") +
theme_minimal()
View(neighborhood)
mape_neighborhood <- st_join(mape_neighborhood, neighborhood, by = "name")
neighborhood <- st_join(neighborhood, mape_neighborhood, by = "name")
ggplot(data = neighborhood) +
geom_sf(aes(fill = MAPE)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "MAPE") +
labs(title = "Mean Absolute Percentage Error by Neighborhood") +
theme_minimal()
# left_join(
#   st_drop_geometry(PhillyPrice.test) %>%
#     group_by(name) %>%
#     summarize(meanPrice = mean(sale_price, na.rm = T)),
#   mutate(PhillyPrice.test, predict.fe =
#                         predict(lm(sale_price ~ name, data = PhillyPrice.test),
#                         PhillyPrice.test)) %>%
#     st_drop_geometry %>%
#     group_by(name) %>%
#       summarize(meanPrediction = mean(predict.fe))) %>%
#       kable() %>% kable_styling()
reg.nhood <- lm(sale_price ~ ., data = as.data.frame(PhillyPrice.training) %>%
dplyr::select(sale_price, total_area, interior_condition, houseAge, shooting.Buffer, dist_to_school, dist_to_commerce, dist_to_PPR, MedHHInc, pctForeign, pctMobility))
PhillyPrice.test.nhood <-
PhillyPrice.test %>%
mutate(Regression = "Neighborhood Effects",
sale_price.Predict = predict(reg.nhood, PhillyPrice.test),
sale_price.Error = sale_price.Predict- sale_price,
sale_price.AbsError = abs(sale_price.Predict- sale_price),
sale_price.APE = (abs(sale_price.Predict- sale_price)) / sale_price)
mape_neighborhood <- PhillyPrice.test.nhood %>%
group_by(name) %>%
summarize(MAPE = mean(sale_price.APE, na.rm = TRUE))
neighborhood <- st_join(neighborhood, mape_neighborhood, by = "name")
ggplot(data = neighborhood) +
geom_sf(aes(fill = MAPE)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "MAPE") +
labs(title = "Mean Absolute Percentage Error by Neighborhood") +
theme_minimal()
left_join(
st_drop_geometry(PhillyPrice.test) %>%
group_by(name) %>%
summarize(meanPrice = mean(sale_price, na.rm = T)),
mutate(PhillyPrice.test, predict.fe =
predict(lm(sale_price ~ name, data = PhillyPrice.test),
PhillyPrice.test)) %>%
st_drop_geometry %>%
group_by(name) %>%
summarize(meanPrediction = mean(predict.fe))) %>%
kable() %>% kable_styling()
reg.nhood <- lm(sale_price ~ ., data = as.data.frame(PhillyPrice.training) %>%
dplyr::select(sale_price, total_area, interior_condition, houseAge, shooting.Buffer, dist_to_school, dist_to_commerce, dist_to_PPR, MedHHInc, pctForeign, pctMobility))
PhillyPrice.test.nhood <-
PhillyPrice.test %>%
mutate(Regression = "Neighborhood Effects",
sale_price.Predict = predict(reg.nhood, PhillyPrice.test),
sale_price.Error = sale_price.Predict- sale_price,
sale_price.AbsError = abs(sale_price.Predict- sale_price),
sale_price.APE = (abs(sale_price.Predict- sale_price)) / sale_price)
mape_neighborhood <- PhillyPrice.test.nhood %>%
group_by(name) %>%
summarize(MAPE = mean(sale_price.APE, na.rm = TRUE))
neighborhood <- st_join(neighborhood, mape_neighborhood, by = "name")
ggplot(data = neighborhood) +
geom_sf(aes(fill = MAPE)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "MAPE") +
labs(title = "Mean Absolute Percentage Error by Neighborhood") +
theme_minimal()
left_join(
st_drop_geometry(PhillyPrice.test) %>%
group_by(name) %>%
summarize(meanPrice = mean(sale_price, na.rm = T)),
mutate(PhillyPrice.test, predict.fe =
predict(lm(sale_price ~ name, data = PhillyPrice.test),
PhillyPrice.test)) %>%
st_drop_geometry %>%
group_by(name) %>%
summarize(meanPrediction = mean(predict.fe)))
reg.nhood <- lm(sale_price ~ ., data = as.data.frame(PhillyPrice.training) %>%
dplyr::select(sale_price, total_area, interior_condition, houseAge, shooting.Buffer, dist_to_school, dist_to_commerce, dist_to_PPR, MedHHInc, pctForeign, pctMobility))
PhillyPrice.test.nhood <-
PhillyPrice.test %>%
mutate(Regression = "Neighborhood Effects",
sale_price.Predict = predict(reg.nhood, PhillyPrice.test),
sale_price.Error = sale_price.Predict- sale_price,
sale_price.AbsError = abs(sale_price.Predict- sale_price),
sale_price.APE = (abs(sale_price.Predict- sale_price)) / sale_price)
mape_neighborhood <- PhillyPrice.test.nhood %>%
group_by(name) %>%
summarize(MAPE = mean(sale_price.APE, na.rm = TRUE))
neighborhood <- st_join(neighborhood, mape_neighborhood, by = "name")
ggplot(data = neighborhood) +
geom_sf(aes(fill = MAPE)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "MAPE") +
labs(title = "Mean Absolute Percentage Error by Neighborhood") +
theme_minimal()
left_join(
st_drop_geometry(PhillyPrice.test) %>%
group_by(name) %>%
summarize(meanPrice = mean(sale_price, na.rm = T)),
mutate(PhillyPrice.test, predict.fe =
predict(lm(sale_price ~ name, data = PhillyPrice.test),
PhillyPrice.test)) %>%
st_drop_geometry %>%
group_by(name) %>%
summarize(meanPrediction = mean(predict.fe)))
reg.nhood <- lm(sale_price ~ ., data = as.data.frame(PhillyPrice.training) %>%
dplyr::select(sale_price, total_area, interior_condition, houseAge, shooting.Buffer, dist_to_school, dist_to_commerce, dist_to_PPR, MedHHInc, pctForeign, pctMobility))
PhillyPrice.test.nhood <-
PhillyPrice.test %>%
mutate(Regression = "Neighborhood Effects",
sale_price.Predict = predict(reg.nhood, PhillyPrice.test),
sale_price.Error = sale_price.Predict- sale_price,
sale_price.AbsError = abs(sale_price.Predict- sale_price),
sale_price.APE = (abs(sale_price.Predict- sale_price)) / sale_price)
mape_neighborhood <- PhillyPrice.test.nhood %>%
group_by(name) %>%
summarize(MAPE = mean(sale_price.APE, na.rm = TRUE))
neighborhood <- st_join(neighborhood, mape_neighborhood, by = "name")
ggplot(data = neighborhood) +
geom_sf(aes(fill = MAPE)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "MAPE") +
labs(title = "Mean Absolute Percentage Error by Neighborhood") +
theme_minimal()
View(PhillyPrice.test.nhood)
mean_price_summary <- PhillyPrice.test.nhood %>%
group_by(name) %>%
summarize(meanPrice = mean(sale_price, na.rm = TRUE))
mean_price_summary <- PhillyPrice.test.nhood %>%
group_by(name) %>%
summarize(meanPrice = mean(sale_price, na.rm = TRUE))
neighborhood <- st_join(neighborhood, mean_price_summary, by = "name")
ggplot(data = plot_data, aes(x = meanPrice, y = MAPE)) +
geom_point(aes(color = name), alpha = 0.7) +  # color by neighborhood for distinction
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +  # Optional: Add linear regression line
scale_x_continuous(labels = scales::dollar_format(scale = 1e-3, suffix = "K"), name = "Mean Price by Neighborhood (in $K)") +
scale_y_continuous(labels = scales::percent_format(scale = 1), name = "Mean Absolute Percentage Error (MAPE)") +
labs(title = "MAPE by Neighborhood as a Function of Mean Price") +
theme_minimal()
mean_price_summary <- PhillyPrice.test.nhood %>%
group_by(name) %>%
summarize(meanPrice = mean(sale_price, na.rm = TRUE))
neighborhood <- st_join(neighborhood, mean_price_summary, by = "name")
ggplot(data = neighborhood, aes(x = meanPrice, y = MAPE)) +
geom_point(aes(color = name), alpha = 0.7) +  # color by neighborhood for distinction
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +  # Optional: Add linear regression line
scale_x_continuous(labels = scales::dollar_format(scale = 1e-3, suffix = "K"), name = "Mean Price by Neighborhood (in $K)") +
scale_y_continuous(labels = scales::percent_format(scale = 1), name = "Mean Absolute Percentage Error (MAPE)") +
labs(title = "MAPE by Neighborhood as a Function of Mean Price") +
theme_minimal()
mean_price_summary <- PhillyPrice.test.nhood %>%
group_by(name) %>%
summarize(meanPrice = mean(sale_price, na.rm = TRUE))
neighborhood <- st_join(neighborhood, mean_price_summary, by = "name")
ggplot(data = neighborhood, aes(x = meanPrice, y = MAPE)) +
geom_point(aes(color = name), alpha = 0.7) +  # color by neighborhood for distinction
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +  # Optional: Add linear regression line
scale_x_continuous(labels = scales::dollar_format(scale = 1e-3, suffix = "K"), name = "Mean Price by Neighborhood (in $K)") +
scale_y_continuous(labels = scales::percent_format(scale = 1), name = "Mean Absolute Percentage Error (MAPE)") +
labs(title = "MAPE by Neighborhood as a Function of Mean Price") +
theme_minimal()
mean_price_summary <- PhillyPrice.test.nhood %>%
group_by(name) %>%
summarize(meanPrice = mean(sale_price, na.rm = TRUE))
neighborhood <- st_join(neighborhood, mean_price_summary, by = "name")
ggplot(data = neighborhood, aes(x = meanPrice.x, y = MAPE)) +
geom_point(aes(color = name), alpha = 0.7) +  # color by neighborhood for distinction
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +  # Optional: Add linear regression line
scale_x_continuous(labels = scales::dollar_format(scale = 1e-3, suffix = "K"), name = "Mean Price by Neighborhood (in $K)") +
scale_y_continuous(labels = scales::percent_format(scale = 1), name = "Mean Absolute Percentage Error (MAPE)") +
labs(title = "MAPE by Neighborhood as a Function of Mean Price") +
theme_minimal()
mean_price_summary <- PhillyPrice.test.nhood %>%
group_by(name) %>%
summarize(meanPrice = mean(sale_price, na.rm = TRUE))
neighborhood <- st_join(neighborhood, mean_price_summary, by = "name")
ggplot(data = neighborhood, aes(x = meanPrice.x, y = MAPE)) +
geom_point(alpha = 0.7) +  # color by neighborhood for distinction
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(title = "MAPE by Neighborhood as a Function of Mean Price") +
theme_minimal()
mean_price_summary <- PhillyPrice.test.nhood %>%
group_by(name) %>%
summarize(meanPrice = mean(sale_price, na.rm = TRUE))
neighborhood <- st_join(neighborhood, mean_price_summary, by = "name")
ggplot(data = neighborhood, aes(x = meanPrice.x, y = MAPE)) +
geom_point(alpha = 0.7) +  # color by neighborhood for distinction
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(title = "MAPE by Neighborhood as a Function of Mean Price") +
theme_minimal()
View(Philly_Housing_joined)
blockgroup21 <- blockgroup21 %>%
mutate(ForeignContext = ifelse(pctForeign > .1, "Majority Foreign-born", "Majority Non-Foreign-born"),
incomeContext = ifelse(MedHHInc > 65,569.4, "High Income", "Low Income"))
blockgroup21 <- blockgroup21 %>%
mutate(ForeignContext = ifelse(pctForeign > .1, "Majority Foreign-born", "Majority Non-Foreign-born"),
incomeContext = ifelse(MedHHInc > 65569.4, "High Income", "Low Income"))
grid.arrange(ncol = 2,
ggplot() + geom_sf(data = na.omit(blockgroup21), aes(fill = ForeignContext)) +
scale_fill_manual(values = c("#25CB10", "#FA7800"), name="Foreign-born Context") +
labs(title = "Foreign-born Context") +
mapTheme() + theme(legend.position="bottom"),
ggplot() + geom_sf(data = na.omit(blockgroup21), aes(fill = incomeContext)) +
scale_fill_manual(values = c("#25CB10", "#FA7800"), name="Income Context") +
labs(title = "Income Context") +
mapTheme() + theme(legend.position="bottom"))
View(coords.test)
bothRegressions <-
rbind(
dplyr::select(PhillyPrice.test, starts_with("SalePrice"), Regression, Name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)),
dplyr::select(PhillyPrice.test.nhood, starts_with("SalePrice"), Regression, Name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)))
bothRegressions <-
rbind(
dplyr::select(PhillyPrice.test, starts_with("sale_price"), Regression, Name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)),
dplyr::select(PhillyPrice.test.nhood, starts_with("sale_price"), Regression, Name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)))
View(PhillyPrice.test)
View(PhillyPrice.test)
PhillyPrice.test %>%
mutate(Regression = "Baseline Regression")
bothRegressions <-
rbind(
dplyr::select(PhillyPrice.test, starts_with("sale_price"), Regression, Name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)),
dplyr::select(PhillyPrice.test.nhood, starts_with("sale_price"), Regression, Name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)))
PhillyPrice.test %>%
mutate(Regression = "Baseline Regression")
View(PhillyPrice.test)
PhillyPrice.test <- PhillyPrice.test %>%
mutate(Regression = "Baseline Regression")
bothRegressions <-
rbind(
dplyr::select(PhillyPrice.test, starts_with("sale_price"), Regression, Name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)),
dplyr::select(PhillyPrice.test.nhood, starts_with("sale_price"), Regression, Name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)))
bothRegressions <-
rbind(
dplyr::select(PhillyPrice.test, starts_with("sale_price"), Regression, name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)),
dplyr::select(PhillyPrice.test.nhood, starts_with("sale_price"), Regression, name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)))
blockgroup21 <- blockgroup21 %>%
mutate(ForeignContext = ifelse(pctForeign > .1, "Majority Foreign-born", "Majority Non-Foreign-born"),
incomeContext = ifelse(MedHHInc > 65569.4, "High Income", "Low Income"))
grid.arrange(ncol = 2,
ggplot() + geom_sf(data = na.omit(blockgroup21), aes(fill = ForeignContext)) +
scale_fill_manual(values = c("#25CB10", "#FA7800"), name="Foreign-born Context") +
labs(title = "Foreign-born Context") +
mapTheme() + theme(legend.position="bottom"),
ggplot() + geom_sf(data = na.omit(blockgroup21), aes(fill = incomeContext)) +
scale_fill_manual(values = c("#25CB10", "#FA7800"), name="Income Context") +
labs(title = "Income Context") +
mapTheme() + theme(legend.position="bottom"))
PhillyPrice.test <- PhillyPrice.test %>%
mutate(Regression = "Baseline Regression")
bothRegressions <-
rbind(
dplyr::select(PhillyPrice.test, starts_with("sale_price"), Regression, name) %>%
dplyr::select(PhillyPrice.test.nhood, starts_with("sale_price"), Regression, name))
PhillyPrice.test <- PhillyPrice.test %>%
mutate(Regression = "Baseline Regression")
bothRegressions <-
rbind(
dplyr::select(PhillyPrice.test, starts_with("sale_price"), Regression, name) %>%
dplyr::select(st_drop_geometry(PhillyPrice.test.nhood), starts_with("sale_price"), Regression, name))
PhillyPrice.test <- PhillyPrice.test %>%
mutate(Regression = "Baseline Regression")
bothRegressions <-
rbind(
dplyr::select(PhillyPrice.test, starts_with("sale_price"), Regression, name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)),
dplyr::select(PhillyPrice.test.nhood, starts_with("sale_price"), Regression, name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)))
PhillyPrice.test <- PhillyPrice.test %>%
mutate(Regression = "Baseline Regression")
bothRegressions <-
rbind(
dplyr::select(PhillyPrice.test, starts_with("sale_price"), Regression, name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)),
dplyr::select(PhillyPrice.test.nhood, starts_with("sale_price"), Regression, name) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error)))
